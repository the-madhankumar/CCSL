"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.set_claim = void 0;
const zod_1 = require("zod");
const tool_js_1 = require("../../tool.js");
const util_js_1 = require("../../util.js");
const auth_js_1 = require("../../../gcp/auth.js");
exports.set_claim = (0, tool_js_1.tool)({
    name: "set_claims",
    description: "Sets custom claims on a specific user's account. Use to create trusted values associated with a user e.g. marking them as an admin. Claims are limited in size and should be succinct in name and value.",
    inputSchema: zod_1.z.object({
        uid: zod_1.z.string().describe("the UID of the user to update"),
        claim: zod_1.z.string().describe("the name (key) of the claim to update, e.g. 'admin'"),
        value: zod_1.z
            .union([
            zod_1.z.string(),
            zod_1.z.number(),
            zod_1.z.boolean(),
            zod_1.z.record(zod_1.z.union([zod_1.z.string(), zod_1.z.number(), zod_1.z.boolean()])),
            zod_1.z.array(zod_1.z.union([zod_1.z.string(), zod_1.z.number(), zod_1.z.boolean()])),
        ])
            .describe("the value of the custom claim"),
    }),
    annotations: {
        title: "Set custom Firebase Auth claim",
        idempotentHint: true,
    },
    _meta: {
        requiresAuth: true,
        requiresProject: true,
    },
}, async ({ uid, claim, value }, { projectId }) => {
    return (0, util_js_1.toContent)(await (0, auth_js_1.setCustomClaim)(projectId, uid, { [claim]: value }, { merge: true }));
});
