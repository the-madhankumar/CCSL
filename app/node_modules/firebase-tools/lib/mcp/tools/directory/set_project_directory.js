"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.set_project_directory = void 0;
const zod_1 = require("zod");
const tool_js_1 = require("../../tool.js");
const util_js_1 = require("../../util.js");
const fs_1 = require("fs");
const path_1 = require("path");
exports.set_project_directory = (0, tool_js_1.tool)({
    name: "set_project_directory",
    description: "Sets the project directory for the Firebase MCP server to utilize for project detection and authentication. This should be a directory with a `firebase.json` file in it. This information is persisted between sessions.",
    inputSchema: zod_1.z.object({
        dir: zod_1.z
            .string()
            .nullable()
            .describe("the absolute path of the directory. set to null to 'unset' the value and fall back to the working directory"),
    }),
    annotations: {
        title: "Set Firebase Project Directory",
        idempotentHint: true,
    },
}, ({ dir }, { host }) => {
    if (dir === null) {
        host.setProjectRoot(null);
        return Promise.resolve((0, util_js_1.toContent)(`Firebase MCP project directory setting deleted. New project root is: ${host.projectRoot || "unset"}`));
    }
    if (!(0, fs_1.existsSync)(dir))
        return Promise.resolve((0, util_js_1.mcpError)(`Directory '${dir}' does not exist.`));
    if (!(0, fs_1.existsSync)((0, path_1.join)(dir, "firebase.json")))
        return Promise.resolve((0, util_js_1.mcpError)(`Directory '${dir}' does not contain a 'firebase.json' file.`));
    host.setProjectRoot(dir);
    return Promise.resolve((0, util_js_1.toContent)(`Firebase MCP project directory set to '${dir}'.`));
});
