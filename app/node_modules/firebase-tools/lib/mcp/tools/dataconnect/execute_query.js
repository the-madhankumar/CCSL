"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute_query = void 0;
const zod_1 = require("zod");
const tool_js_1 = require("../../tool.js");
const util_js_1 = require("../../util.js");
const client = require("../../../dataconnect/dataplaneClient.js");
const fileUtils_js_1 = require("../../../dataconnect/fileUtils.js");
const converter_js_1 = require("./converter.js");
exports.execute_query = (0, tool_js_1.tool)({
    name: "execute_query",
    description: "Executes a deployed Data Connect query. Cannot write any data.",
    inputSchema: zod_1.z.object({
        operationName: zod_1.z.string().describe("The name of the deployed operation you want to execute"),
        serviceId: zod_1.z
            .string()
            .nullable()
            .describe("The Firebase Data Connect service ID to look for. If there is only one service defined in firebase.json, this can be omitted and that will be used."),
        connectorId: zod_1.z
            .string()
            .nullable()
            .describe("The Firebase Data Connect connector ID to look for. If there is only one connector defined in dataconnect.yaml, this can be omitted and that will be used."),
        variables: zod_1.z
            .record(zod_1.z.string())
            .optional()
            .describe("Variables for this operation. Use dataconnect_get_connector to find the expected variables for this query"),
    }),
    annotations: {
        title: "Executes a deployed Data Connect query.",
        readOnlyHint: true,
    },
    _meta: {
        requiresProject: true,
        requiresAuth: true,
    },
}, async ({ operationName, serviceId, connectorId, variables }, { projectId, config }) => {
    const serviceInfo = await (0, fileUtils_js_1.pickService)(projectId, config, serviceId || undefined);
    if (!connectorId) {
        if (serviceInfo.connectorInfo.length === 0) {
            return (0, util_js_1.mcpError)(`Service ${serviceInfo.serviceName} has no connectors`);
        }
        if (serviceInfo.connectorInfo.length > 1) {
            return (0, util_js_1.mcpError)(`Service ${serviceInfo.serviceName} has more than one connector. Please use the connectorId argument to specifiy which connector this operation is part of.`);
        }
        connectorId = serviceInfo.connectorInfo[0].connectorYaml.connectorId;
    }
    const connectorPath = `${serviceInfo.serviceName}/connectors/${connectorId}`;
    const response = await client.executeGraphQLQuery(client.dataconnectDataplaneClient(), connectorPath, { operationName, variables });
    return (0, converter_js_1.graphqlResponseToToolResponse)(response.body);
});
