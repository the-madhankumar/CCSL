"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.firestoreDocumentToJson = void 0;
const logger_1 = require("../../../logger");
function firestoreValueToJson(firestoreValue) {
    var _a, _b;
    if ("nullValue" in firestoreValue)
        return null;
    if ("booleanValue" in firestoreValue)
        return firestoreValue.booleanValue;
    if ("integerValue" in firestoreValue) {
        const num = Number(firestoreValue.integerValue);
        if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {
            return firestoreValue.integerValue;
        }
        return num;
    }
    if ("doubleValue" in firestoreValue)
        return firestoreValue.doubleValue;
    if ("timestampValue" in firestoreValue)
        return { __type__: "Timestamp", value: firestoreValue.timestampValue };
    if ("stringValue" in firestoreValue)
        return firestoreValue.stringValue;
    if ("bytesValue" in firestoreValue)
        return firestoreValue.bytesValue;
    if ("referenceValue" in firestoreValue)
        return { __type__: "Reference", value: firestoreValue.referenceValue };
    if ("geoPointValue" in firestoreValue)
        return {
            __type__: "GeoPoint",
            value: [firestoreValue.geoPointValue.latitude, firestoreValue.geoPointValue.longitude],
        };
    if ("arrayValue" in firestoreValue)
        return (_b = (_a = firestoreValue.arrayValue.values) === null || _a === void 0 ? void 0 : _a.map((v) => firestoreValueToJson(v))) !== null && _b !== void 0 ? _b : [];
    if ("mapValue" in firestoreValue) {
        const map = firestoreValue.mapValue.fields || {};
        const obj = {};
        for (const key of Object.keys(map)) {
            obj[key] = firestoreValueToJson(map[key]);
        }
        return obj;
    }
    logger_1.logger.warn("Unhandled Firestore Value type encountered:", firestoreValue);
    return undefined;
}
function firestoreDocumentToJson(firestoreDoc) {
    const nameParts = firestoreDoc.name.split("/documents/");
    const path = nameParts.length > 1 ? nameParts[nameParts.length - 1] : "";
    const result = { __path__: path };
    if (firestoreDoc.fields) {
        for (const key of Object.keys(firestoreDoc.fields)) {
            result[key] = firestoreValueToJson(firestoreDoc.fields[key]);
        }
    }
    return result;
}
exports.firestoreDocumentToJson = firestoreDocumentToJson;
